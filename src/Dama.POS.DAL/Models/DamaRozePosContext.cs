// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Dama.POS.DAL.Models;

public partial class DamaRozePosContext : DbContext
{
    public DamaRozePosContext(DbContextOptions<DamaRozePosContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CategoryLanguage> CategoryLanguages { get; set; }

    public virtual DbSet<Diet> Diets { get; set; }

    public virtual DbSet<DietLanguage> DietLanguages { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemLanguage> ItemLanguages { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<LocationLanguage> LocationLanguages { get; set; }

    public virtual DbSet<Map> Maps { get; set; }

    public virtual DbSet<MapLanguage> MapLanguages { get; set; }

    public virtual DbSet<Menu> Menus { get; set; }

    public virtual DbSet<MenuLanguage> MenuLanguages { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderDetailTracking> OrderDetailTrackings { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<OrderStatusLanguage> OrderStatusLanguages { get; set; }

    public virtual DbSet<OrderTracking> OrderTrackings { get; set; }

    public virtual DbSet<RestorantTable> RestorantTables { get; set; }

    public virtual DbSet<RestorantTableLanguage> RestorantTableLanguages { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.ToTable("Category", tb => tb.HasTrigger("FixSequence"));

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.NameId)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ParentCategoryId).HasMaxLength(15);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CategoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Category_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.CategoryLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Category_UserModifiedBy");

            entity.HasOne(d => d.ParentCategory).WithMany(p => p.InverseParentCategory)
                .HasForeignKey(d => d.ParentCategoryId)
                .HasConstraintName("FK_Category_Category");
        });

        modelBuilder.Entity<CategoryLanguage>(entity =>
        {
            entity.ToTable("CategoryLanguage");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CategorytId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.Categoryt).WithMany(p => p.CategoryLanguages)
                .HasForeignKey(d => d.CategorytId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CategoryLanguage_Category");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CategoryLanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CategoryLanguage_UserCreatedBy");

            entity.HasOne(d => d.Language).WithMany(p => p.CategoryLanguages)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CategoryLanguage_Language");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.CategoryLanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CategoryLanguage_UserModifiedBy");
        });

        modelBuilder.Entity<Diet>(entity =>
        {
            entity.ToTable("Diet");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DietCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Diet_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.DietLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Diet_UserModifiedby");
        });

        modelBuilder.Entity<DietLanguage>(entity =>
        {
            entity.ToTable("DietLanguage");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.DietId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DietLanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DietLanguage_UserCreatedBy");

            entity.HasOne(d => d.Diet).WithMany(p => p.DietLanguages)
                .HasForeignKey(d => d.DietId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DietLanguage_Diet");

            entity.HasOne(d => d.Language).WithMany(p => p.DietLanguages)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DietLanguage_Language");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.DietLanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DietLanguage_UserModifiedBy");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.ToTable("Item", tb => tb.HasTrigger("FixItem"));

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CategoryId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.NameId)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Category).WithMany(p => p.Items)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Item_Category");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ItemCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Item_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.ItemLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Item_UserModifiedBy");
        });

        modelBuilder.Entity<ItemLanguage>(entity =>
        {
            entity.ToTable("ItemLanguage");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.ItemId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ItemLanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemLanguage_UserCreatedBy");

            entity.HasOne(d => d.Item).WithMany(p => p.ItemLanguages)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemLanguage_Item");

            entity.HasOne(d => d.Language).WithMany(p => p.ItemLanguages)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemLanguage_Language");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.ItemLanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemLanguage_UserModifiedBy");
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.ToTable("Language");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.LanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Language_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.LanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Language_UserModifiedBy");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.ToTable("Location");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.Ip)
                .IsRequired()
                .HasMaxLength(16);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.LocationCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Location_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.LocationLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Location_LocationModifiedBy");
        });

        modelBuilder.Entity<LocationLanguage>(entity =>
        {
            entity.ToTable("LocationLanguage");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.LocationLanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LocationLanguage_UserCreatedBy");

            entity.HasOne(d => d.Language).WithMany(p => p.LocationLanguages)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LocationLanguage_Language");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.LocationLanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LocationLanguage_UserModifiedBy");

            entity.HasOne(d => d.Location).WithMany(p => p.LocationLanguages)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LocationLanguage_Location");
        });

        modelBuilder.Entity<Map>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Maps");

            entity.ToTable("Map");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MapCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Map_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.MapLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Map_UserModifiedBy");
        });

        modelBuilder.Entity<MapLanguage>(entity =>
        {
            entity.ToTable("MapLanguage");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MapId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MapLanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MapLanguage_UserCreatedBy");

            entity.HasOne(d => d.Language).WithMany(p => p.MapLanguages)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MapLanguage_Language");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.MapLanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MapLanguage_UserModifiedBy");

            entity.HasOne(d => d.Map).WithMany(p => p.MapLanguages)
                .HasForeignKey(d => d.MapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MapLanguage_Map");
        });

        modelBuilder.Entity<Menu>(entity =>
        {
            entity.ToTable("Menu");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MenuCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Menu_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.MenuLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Menu_MenuModifiedBy");
        });

        modelBuilder.Entity<MenuLanguage>(entity =>
        {
            entity.ToTable("MenuLanguage");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MenuId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MenuLanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MenuLanguage_UserCreatedBy");

            entity.HasOne(d => d.Language).WithMany(p => p.MenuLanguages)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MenuLanguage_Language");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.MenuLanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MenuLanguage_UserModifiedBy");

            entity.HasOne(d => d.Menu).WithMany(p => p.MenuLanguages)
                .HasForeignKey(d => d.MenuId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MenuLanguage_Menu");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.ToTable("Order");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy).HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastModifiedBy).HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Note)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.OrderLanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.OrderStatusId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.PrintDate).HasColumnType("datetime");
            entity.Property(e => e.PrintLanguageId).HasMaxLength(15);
            entity.Property(e => e.ReceivedBy).HasMaxLength(15);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_Order_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.OrderLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .HasConstraintName("FK_Order_UserLastModifiBy");

            entity.HasOne(d => d.ReceivedByNavigation).WithMany(p => p.OrderReceivedByNavigations)
                .HasForeignKey(d => d.ReceivedBy)
                .HasConstraintName("FK_Order_UserRecivedBy");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.ToTable("OrderDetail");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedBy).HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ItemId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy).HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.OrderStatusId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderDetailCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_OrderDetail_UserCreatedBy");

            entity.HasOne(d => d.Item).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_Item");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.OrderDetailLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .HasConstraintName("FK_OrderDetail_UserModifiedBy");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_Order");

            entity.HasOne(d => d.OrderStatus).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_OrderStatus");
        });

        modelBuilder.Entity<OrderDetailTracking>(entity =>
        {
            entity.ToTable("OrderDetailTracking");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy).HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderDetailId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.StatusId)
                .IsRequired()
                .HasMaxLength(15);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderDetailTrackings)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_OrderDetailTracking_User");

            entity.HasOne(d => d.OrderDetail).WithMany(p => p.OrderDetailTrackings)
                .HasForeignKey(d => d.OrderDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetailTracking_OrderDetail");

            entity.HasOne(d => d.Status).WithMany(p => p.OrderDetailTrackings)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetailTracking_OrderStatus");
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.ToTable("OrderStatus");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderStatusCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderStatus_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.OrderStatusLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderStatus_UserModifiedBy");
        });

        modelBuilder.Entity<OrderStatusLanguage>(entity =>
        {
            entity.ToTable("OrderStatusLanguage");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.OrderStatusId)
                .IsRequired()
                .HasMaxLength(15);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderStatusLanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderStatusLanguage_UserCreatedBy");

            entity.HasOne(d => d.Language).WithMany(p => p.OrderStatusLanguages)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderStatusLanguage_Language");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.OrderStatusLanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderStatusLanguage_UserModifiedBy");

            entity.HasOne(d => d.OrderStatus).WithMany(p => p.OrderStatusLanguages)
                .HasForeignKey(d => d.OrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderStatusLanguage_OrderStatus");
        });

        modelBuilder.Entity<OrderTracking>(entity =>
        {
            entity.ToTable("OrderTracking");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy).HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.StatusId)
                .IsRequired()
                .HasMaxLength(15);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrderTrackings)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_OrderTracking_User");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderTrackings)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderTracking_Order");

            entity.HasOne(d => d.Status).WithMany(p => p.OrderTrackings)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderTracking_OrderStatus");
        });

        modelBuilder.Entity<RestorantTable>(entity =>
        {
            entity.ToTable("RestorantTable");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MapId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.RestorantTableCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RestorantTable_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.RestorantTableLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RestorantTable_UserModifiedBy");

            entity.HasOne(d => d.Map).WithMany(p => p.RestorantTables)
                .HasForeignKey(d => d.MapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RestorantTable_Map");
        });

        modelBuilder.Entity<RestorantTableLanguage>(entity =>
        {
            entity.ToTable("RestorantTableLanguage");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LanguageId)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedBy)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.RestorantTableId)
                .IsRequired()
                .HasMaxLength(15);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.RestorantTableLanguageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RestorantTableLanguage_UserCreatedBy");

            entity.HasOne(d => d.Language).WithMany(p => p.RestorantTableLanguages)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RestorantTableLanguage_Language");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.RestorantTableLanguageLastModifiedByNavigations)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RestorantTableLanguage_UserModifiedBy");

            entity.HasOne(d => d.RestorantTable).WithMany(p => p.RestorantTableLanguages)
                .HasForeignKey(d => d.RestorantTableId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RestorantTableLanguage_RestorantTable");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Id).HasMaxLength(15);
            entity.Property(e => e.CreatedBy).HasMaxLength(15);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsEnabled).HasDefaultValue(true);
            entity.Property(e => e.LastModifiedBy).HasMaxLength(15);
            entity.Property(e => e.LastModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InverseCreatedByNavigation)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_User_UserCreatedBy");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.InverseLastModifiedByNavigation)
                .HasForeignKey(d => d.LastModifiedBy)
                .HasConstraintName("FK_User_UserModifiBy");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}